#!/bin/bash

#
# Assumptions:
#  1) User has partitioned, formatted, and mounted partitions on /mnt
#  2) Network is functional
#  3) Arguments passed to the script are valid pacman targets
#  4) A valid mirror appears in /etc/pacman.d/mirrorlist
#

version=@version@

shopt -s extglob

DATADIR='@datadir@'
LIBDIR='@libdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh

import ${LIBDIR}/util.sh
import ${LIBDIR}/util-mount.sh
import ${LIBDIR}/util-chroot.sh

newroot=/mnt

hostcache=false
copykeyring=true
copymirrorlist=true
branch=stable

usage() {
    echo "usage: ${0##*/} [options] root [packages...]"
    echo " -C <config>      Use an alternate config file for pacman"
    echo " -S <config>      Use an alternate config file for pacman-mirrors"
    echo " -B <branch>      Use an alternate branch"
    echo ' -U <url>         Use a specific mirror'
    echo " -c               Use the package cache on the host, rather than the target"
    echo " -d               Allow installation to a non-mountpoint directory"
    echo " -G               Avoid copying the host's pacman keyring to the target"
    echo " -i               Avoid auto-confirmation of package selections"
    echo " -M               Avoid copying the host's mirrorlist to the target"
    echo " -h               Print this help message"
    echo ''
    echo ' basestrap installs packages to the specified new root directory.'
    echo ' If no packages are given, basestrap defaults to the "base" group.'
    echo ''
    echo ''
    exit $1
}

# if [[ -z $1 || $1 = @(-h|--help) ]]; then
#     usage
#     exit $(( $# ? 0 : 1 ))
# fi

orig_argv=("$0" "$@")

opts=':C:S:B:U:cdGiM'

while getopts ${opts} arg; do
    case "${arg}" in
        C) pacman_config=$OPTARG ;;
        S) mirrors_conf="$OPTARG" ;;
        d) directory=true ;;
        c) hostcache=true ;;
        i) interactive=true ;;
        G) copykeyring=false ;;
        M) copymirrorlist=false ;;
        B) branch="$OPTARG" ;;
        U) mirror="$OPTARG" ;;
        :) echo "invalid argument ${arg}:$OPTARG"; usage 1;;
        ?) usage 0 ;;
    esac
done
shift $(( OPTIND - 1 ))

check_root

(( $# )) || die "No root directory specified"
newroot=$1; shift
pacman_args=("${@:-base}")

${hostcache} && pacman_args+=(--cachedir="$newroot/var/cache/pacman/pkg")

${interactive} && pacman_args+=(--noconfirm)

[[ -n $pacman_config ]] && pacman_args+=(--config="$pacman_config")

[[ -d $newroot ]] || die "%s is not a directory" "$newroot"

if ! mountpoint -q "$newroot" && ! ${directory}; then
    die '%s is not a mountpoint!' "$newroot"
fi

mv "$working_dir/etc/locale.gen" "$working_dir/etc/locale.gen.bak"
mv "$working_dir/etc/locale.conf" "$working_dir/etc/locale.conf.bak"
printf '%s.UTF-8 UTF-8\n' en_US > "$working_dir/etc/locale.gen"
printf 'LANG=%s.UTF-8\n' en_US > "$working_dir/etc/locale.conf"
printf 'LC_MESSAGES=C\n' >> "$working_dir/etc/locale.conf"

pm_args=(-a -R -p "$newroot" -S "${branch}")

[[ -n ${mirror} ]] && pm_args+=(-n -U "${mirror}")

info "pm_args: %s" "${pm_args[*]}"
# create obligatory directories
create_min_fs "$newroot"

if [[ -n $mirrors_conf ]]; then
    cp ${mirrors_conf} "$newroot/etc/pacman-mirrors.conf"
fi

info "Configuring pacman-mirrors: %s" "${branch}"
pacman-mirrors "${pm_args[@]}"

# mount API filesystems
chroot_api_mount "$newroot" || die "failed to setup API filesystems in new root"

msg2 'Installing packages to %s' "$newroot"
if ! pacman -r "$newroot" -Sy "${pacman_args[@]}"; then
    die 'Failed to install packages to new root'
fi

if ${copykeyring};then
    copy_keyring "$newroot"
fi

if ${copymirrorlist};then
    copy_mirrorlist "$newroot"
fi
